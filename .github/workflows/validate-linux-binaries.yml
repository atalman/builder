name: Validate binary images

on:
  push:
    branches:
      main
    paths:
      - .github/workflows/validate-linux-binaries.yml
  pull_request:
    paths:
      - .github/workflows/validate-linux-binaries.yml
jobs:
  generate-conda-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: conda
      os: linux
      channel: nightly
  generate-wheel-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux
      channel: nightly
  generate-libtorch-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: libtorch
      os: linux
      channel: nightly
  validate-linux-binaries-conda:
    needs: generate-conda-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-conda-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    steps:
      - name: Checkout PyTorch builder
        uses: actions/checkout@v2
      - name: Check nvidia smi
        if: ${{ matrix.gpu_arch_type == 'cuda' }}
        run: |
          nvidia-smi
      - name: Instlla Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python_version }}
          auto-update-conda: true
          miniconda-version: "latest"
          activate-environment: testenv
      - name: Install PyTorch and run tests
        env:
          GPU_ARCH_VER: ${{ matrix.gpu_arch_version }}
          GPU_ARCH_TYPE: ${{ matrix.gpu_arch_type }}
          INSTALLATION: ${{ matrix.installation }}
          ENV_NAME: conda-env-${{ github.run_id }}
        run: |
          set -ex
          conda create -yp ${ENV_NAME} python=${{ matrix.python_version }} numpy
          conda run -p ${ENV_NAME} $INSTALLATION
          conda run -p ${ENV_NAME} python3  ./test/smoke_test/smoke_test.py
  validate-linux-binaries-wheels:
    needs: generate-wheel-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-wheel-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    steps:
      - name: Checkout PyTorch builder
        uses: actions/checkout@v2
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python_version }}
          auto-update-conda: true
          miniconda-version: "latest"
          activate-environment: testenv
      - name: Check nvidia smi
        if: ${{ matrix.gpu_arch_type == 'cuda' }}
        run: |
          nvidia-smi
      - name: Conda Install pytorch and smoke test
        env:
          GPU_ARCH_VER: ${{ matrix.gpu_arch_version }}
          GPU_ARCH_TYPE: ${{ matrix.gpu_arch_type }}
          INSTALLATION: ${{ matrix.installation }}
          ENV_NAME: conda-env-${{ github.run_id }}
        run: |
          set -ex
          conda create -yp ${ENV_NAME} python=${{ matrix.python_version }} numpy
          conda run -p ${ENV_NAME} $INSTALLATION
          conda run -p ${ENV_NAME} python3  ./test/smoke_test/smoke_test.py
  validate-linux-libtorch-binaries:
    needs: generate-libtorch-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-libtorch-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: "ubuntu-20.04"
    env:
      PYTHON_VERSION: ${{ matrix.python_version }}
    steps:
      - name: Checkout PyTorch builder
        uses: actions/checkout@v2
      - name: Install pytorch and smoke test
        env:
          INSTALLATION: ${{ matrix.installation }}
          ENV_NAME: conda-env-${{ github.run_id }}
        run: |
          sudo apt-get install unzip -y
          set -ex
          curl ${INSTALLATION} -o libtorch.zip
          unzip libtorch.zip
