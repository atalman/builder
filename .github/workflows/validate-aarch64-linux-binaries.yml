name: Validate Aarch64 linux binaries

on:
  workflow_call:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: false
        default: test
        type: string
      ref:
        description: 'Reference to checkout, defaults to empty'
        default: ""
        required: false
        type: string
      torchonly:
        description: 'Validate torchonly'
        default: false
        required: false
        type: boolean
  workflow_dispatch:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: choice
        options:
          - release
          - nightly
          - test
          - all
      ref:
        description: 'Reference to checkout, defaults to empty'
        default: ""
        required: false
        type: string
      torchonly:
        description: 'Validate torchonly'
        default: false
        required: false
        type: boolean
  pull_request:
    paths:
      - .github/workflows/validate-aarch64-linux-binaries.yml

jobs:
  generate-aarch64-linux-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux-aarch64
      channel: test
      with-cuda: disable

  linux-aarch64:
    needs: generate-aarch64-linux-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-aarch64-linux-matrix.outputs.matrix) }}
      fail-fast: false
    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    name: ${{ matrix.build_name }}
    with:
      runner: ${{ matrix.validation_runner }}
      repository: "pytorch/builder"
      ref: ${{ inputs.ref || github.ref }}
      job-name: ${{ matrix.build_name }}
      docker-image: ${{ matrix.container_image }}
      binary-matrix: ${{ toJSON(matrix) }}
      no-sudo: true
      script: |
        set -ex
        export DESIRED_PYTHON=${{ matrix.python_version }}
        source ./aarch64_linux/aarch64_ci_setup.sh
        echo "/opt/conda/bin" >> $GITHUB_PATH

        # todo: Remove after aarch64 filename is fixed
        export MATRIX_INSTALLATION="pip3 install torch=2.1.0.dev20230830 torchvision=0.16.0 torchaudio=2.1.0 --extra-index-url https://download.pytorch.org/whl/test/cpu"

        export ENV_NAME="conda-env-${{ github.run_id }}"
        export TARGET_OS="linux-aarch64"
        export TORCH_ONLY=${{ inputs.torchonly }}
        eval "$(conda shell.bash hook)"

        # Standart case: Validate binaries
        source ./.github/scripts/validate_binaries.sh
